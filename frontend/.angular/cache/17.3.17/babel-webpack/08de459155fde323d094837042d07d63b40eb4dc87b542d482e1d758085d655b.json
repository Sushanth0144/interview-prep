{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:5000/api';\n      this.loggedIn = new BehaviorSubject(false);\n      this.tokenKey = 'auth_token';\n      const token = localStorage.getItem(this.tokenKey);\n      if (token) {\n        this.loggedIn.next(true);\n      }\n    }\n    register(username, password) {\n      return this.http.post(`${this.apiUrl}/register`, {\n        username,\n        password\n      });\n    }\n    login(username, password) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        username,\n        password\n      }).pipe(tap(response => {\n        localStorage.setItem(this.tokenKey, response.access_token);\n        this.loggedIn.next(true);\n      }));\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n      this.loggedIn.next(false);\n    }\n    isLoggedIn() {\n      return this.loggedIn.asObservable();\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}