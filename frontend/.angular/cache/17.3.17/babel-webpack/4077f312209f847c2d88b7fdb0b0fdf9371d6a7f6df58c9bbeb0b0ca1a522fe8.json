{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../services/auth.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/form-field\";\nfunction RegisterComponent_mat_error_8_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Username is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_8_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Username must be at least 6 characters.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_8_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Username must contain only letters and numbers.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, RegisterComponent_mat_error_8_span_1_Template, 2, 0, \"span\", 4)(2, RegisterComponent_mat_error_8_span_2_Template, 2, 0, \"span\", 4)(3, RegisterComponent_mat_error_8_span_3_Template, 2, 0, \"span\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.username == null ? null : ctx_r1.username.errors == null ? null : ctx_r1.username.errors[\"required\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.username == null ? null : ctx_r1.username.errors == null ? null : ctx_r1.username.errors[\"minlength\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.username == null ? null : ctx_r1.username.errors == null ? null : ctx_r1.username.errors[\"pattern\"]);\n  }\n}\nfunction RegisterComponent_mat_error_13_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_13_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password must be at least 8 characters.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_13_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password must include uppercase, lowercase, and a number.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, RegisterComponent_mat_error_13_span_1_Template, 2, 0, \"span\", 4)(2, RegisterComponent_mat_error_13_span_2_Template, 2, 0, \"span\", 4)(3, RegisterComponent_mat_error_13_span_3_Template, 2, 0, \"span\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.password == null ? null : ctx_r1.password.errors == null ? null : ctx_r1.password.errors[\"required\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.password == null ? null : ctx_r1.password.errors == null ? null : ctx_r1.password.errors[\"minlength\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.password == null ? null : ctx_r1.password.errors == null ? null : ctx_r1.password.errors[\"pattern\"]);\n  }\n}\nfunction RegisterComponent_mat_error_18_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Confirm password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_18_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Confirm password must be at least 8 characters.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_18_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Passwords do not match.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, RegisterComponent_mat_error_18_span_1_Template, 2, 0, \"span\", 4)(2, RegisterComponent_mat_error_18_span_2_Template, 2, 0, \"span\", 4)(3, RegisterComponent_mat_error_18_span_3_Template, 2, 0, \"span\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.confirmPassword == null ? null : ctx_r1.confirmPassword.errors == null ? null : ctx_r1.confirmPassword.errors[\"required\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.confirmPassword == null ? null : ctx_r1.confirmPassword.errors == null ? null : ctx_r1.confirmPassword.errors[\"minlength\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.registerForm.hasError(\"mismatch\") && (ctx_r1.confirmPassword == null ? null : ctx_r1.confirmPassword.touched));\n  }\n}\nfunction RegisterComponent_ng_template_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.error);\n  }\n}\nfunction RegisterComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.error);\n  }\n}\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(dialogRef, fb, authService, router) {\n      this.dialogRef = dialogRef;\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.error = '';\n      this.registerForm = this.fb.group({\n        username: ['', [Validators.required, Validators.minLength(6), Validators.pattern('^[a-zA-Z0-9]+$')]],\n        password: ['', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*$')]],\n        confirmPassword: ['', [Validators.required, Validators.minLength(8)]]\n      }, {\n        validators: this.passwordMatchValidator.bind(this)\n      });\n    }\n    passwordMatchValidator(group) {\n      const password = group.get('password')?.value;\n      const confirmPassword = group.get('confirmPassword')?.value;\n      console.log('Validation:', {\n        password,\n        confirmPassword,\n        mismatch: password !== confirmPassword\n      });\n      return password === confirmPassword ? null : {\n        mismatch: true\n      };\n    }\n    onSubmit() {\n      console.log('Form valid:', this.registerForm.valid, this.registerForm.value);\n      if (this.registerForm.valid) {\n        const {\n          username,\n          password\n        } = this.registerForm.value;\n        this.authService.register(username, password).subscribe({\n          next: () => {\n            this.dialogRef.close();\n            this.authService.login(username, password).subscribe({\n              next: () => {\n                this.router.navigate(['/questions']);\n              },\n              error: err => this.error = err.error?.message || 'Login after registration failed.'\n            });\n          },\n          error: err => this.error = err.error?.message || 'Registration failed due to a server issue. Check console for details.'\n        });\n      } else {\n        this.error = 'Please fix the form errors before submitting.';\n        this.registerForm.markAllAsTouched();\n      }\n    }\n    get username() {\n      return this.registerForm.get('username');\n    }\n    get password() {\n      return this.registerForm.get('password');\n    }\n    get confirmPassword() {\n      return this.registerForm.get('confirmPassword');\n    }\n    static {\n      this.ɵfac = function RegisterComponent_Factory(t) {\n        return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: RegisterComponent,\n        selectors: [[\"app-register\"]],\n        decls: 27,\n        vars: 6,\n        consts: [[\"errorTemplate\", \"\"], [3, \"ngSubmit\", \"formGroup\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"confirmPassword\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"], [\"class\", \"error\", 4, \"ngIf\"], [\"mat-button\", \"\", 3, \"click\"], [2, \"color\", \"red\"], [1, \"error\"]],\n        template: function RegisterComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"mat-dialog-content\")(1, \"h2\");\n            i0.ɵɵtext(2, \"Register\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_3_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onSubmit());\n            });\n            i0.ɵɵelementStart(4, \"mat-form-field\", 2)(5, \"mat-label\");\n            i0.ɵɵtext(6, \"Username\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(7, \"input\", 3);\n            i0.ɵɵtemplate(8, RegisterComponent_mat_error_8_Template, 4, 3, \"mat-error\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"mat-form-field\", 2)(10, \"mat-label\");\n            i0.ɵɵtext(11, \"Password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(12, \"input\", 5);\n            i0.ɵɵtemplate(13, RegisterComponent_mat_error_13_Template, 4, 3, \"mat-error\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(14, \"mat-form-field\", 2)(15, \"mat-label\");\n            i0.ɵɵtext(16, \"Confirm Password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(17, \"input\", 6);\n            i0.ɵɵtemplate(18, RegisterComponent_mat_error_18_Template, 4, 3, \"mat-error\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"button\", 7);\n            i0.ɵɵtext(20, \" Register \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(21, RegisterComponent_ng_template_21_Template, 2, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(23, RegisterComponent_div_23_Template, 2, 1, \"div\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(24, \"mat-dialog-actions\")(25, \"button\", 9);\n            i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_25_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.dialogRef.close());\n            });\n            i0.ɵɵtext(26, \"Cancel\");\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (ctx.username == null ? null : ctx.username.touched) && (ctx.username == null ? null : ctx.username.invalid));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (ctx.password == null ? null : ctx.password.touched) && (ctx.password == null ? null : ctx.password.invalid));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (ctx.confirmPassword == null ? null : ctx.confirmPassword.touched) && (ctx.confirmPassword == null ? null : ctx.confirmPassword.invalid));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.error && !ctx.registerForm);\n          }\n        },\n        dependencies: [i5.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i1.MatDialogActions, i1.MatDialogContent, i6.MatButton, i7.MatInput, i8.MatFormField, i8.MatLabel, i8.MatError, i2.FormGroupDirective, i2.FormControlName],\n        styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:15px}.error[_ngcontent-%COMP%]{color:red;margin-bottom:15px}mat-error[_ngcontent-%COMP%]{font-size:.85em;margin-top:5px}button[_ngcontent-%COMP%]{margin-top:10px}\"]\n      });\n    }\n  }\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}