{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:5000/api'; // Base URL\n      this.tokenKey = 'token'; // Consistent key name\n      this.isLoggedInSubject = new BehaviorSubject(false);\n      this.checkLoginStatus();\n    }\n    register(username, password) {\n      return this.http.post(`${this.apiUrl}/register`, {\n        username,\n        password\n      }).pipe(tap(() => this.checkLoginStatus()), catchError(error => {\n        console.error('Registration error:', error);\n        throw error;\n      }));\n    }\n    login(username, password) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        username,\n        password\n      }).pipe(tap(response => {\n        const token = response.access_token;\n        if (token) {\n          localStorage.setItem(this.tokenKey, token);\n          this.checkLoginStatus();\n        } else {\n          throw new Error(\"No token received from server\");\n        }\n      }), catchError(error => {\n        console.error('Login error:', error);\n        throw error;\n      }));\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n      this.isLoggedInSubject.next(false);\n    }\n    isLoggedIn() {\n      return this.isLoggedInSubject.asObservable();\n    }\n    checkLoginStatus() {\n      const token = localStorage.getItem(this.tokenKey);\n      this.isLoggedInSubject.next(!!token);\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    getHttpOptions() {\n      const token = this.getToken();\n      return {\n        headers: token ? new HttpHeaders({\n          'Authorization': `Bearer ${token}`\n        }) : new HttpHeaders()\n      };\n    }\n    getQuestions() {\n      const token = this.getToken();\n      if (!token) {\n        return of({\n          topics: []\n        });\n      }\n      return this.http.get(`${this.apiUrl}/questions`, this.getHttpOptions()).pipe(catchError(error => {\n        console.error('Error fetching questions:', error);\n        return of({\n          topics: []\n        });\n      }));\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}