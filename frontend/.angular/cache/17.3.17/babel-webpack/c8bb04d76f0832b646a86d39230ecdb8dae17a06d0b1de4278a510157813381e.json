{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { catchError, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../services/auth.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/form-field\";\nfunction LoginComponent_mat_error_8_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Username is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_8_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Username must be at least 6 characters.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_8_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Username must contain only letters and numbers.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, LoginComponent_mat_error_8_span_1_Template, 2, 0, \"span\", 3)(2, LoginComponent_mat_error_8_span_2_Template, 2, 0, \"span\", 3)(3, LoginComponent_mat_error_8_span_3_Template, 2, 0, \"span\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"required\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"minlength\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.username == null ? null : ctx_r0.username.errors == null ? null : ctx_r0.username.errors[\"pattern\"]);\n  }\n}\nfunction LoginComponent_mat_error_13_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_13_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password must be at least 8 characters.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_13_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password must include uppercase, lowercase, and a number.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, LoginComponent_mat_error_13_span_1_Template, 2, 0, \"span\", 3)(2, LoginComponent_mat_error_13_span_2_Template, 2, 0, \"span\", 3)(3, LoginComponent_mat_error_13_span_3_Template, 2, 0, \"span\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.password == null ? null : ctx_r0.password.errors == null ? null : ctx_r0.password.errors[\"required\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.password == null ? null : ctx_r0.password.errors == null ? null : ctx_r0.password.errors[\"minlength\"]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.password == null ? null : ctx_r0.password.errors == null ? null : ctx_r0.password.errors[\"pattern\"]);\n  }\n}\nfunction LoginComponent_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Login\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Logging in...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(dialogRef, fb, authService, router) {\n      this.dialogRef = dialogRef;\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.error = '';\n      this.isLoading = false;\n      this.loginForm = this.fb.group({\n        username: ['', [Validators.required, Validators.minLength(4), Validators.pattern('^[a-zA-Z0-9]+$')]],\n        password: ['', [Validators.required, Validators.minLength(6)]]\n      });\n    }\n    onSubmit() {\n      if (this.loginForm.valid) {\n        this.isLoading = true;\n        this.error = '';\n        const {\n          username,\n          password\n        } = this.loginForm.value;\n        this.authService.login(username, password).pipe(tap(response => {\n          console.log('Login success:', response);\n          if (!response.access_token) throw new Error('No token received from server');\n          // ✅ Close dialog & redirect based on role\n          this.dialogRef.close();\n          this.authService.handleLoginRedirect(this.router);\n        }), catchError(err => {\n          console.error('Login error:', err);\n          this.error = err.error?.message || 'Login failed. Check credentials.';\n          return throwError(() => err);\n        })).subscribe({\n          complete: () => this.isLoading = false\n        });\n      } else {\n        this.error = 'Please fix the form errors before submitting.';\n        this.loginForm.markAllAsTouched();\n      }\n    }\n    get username() {\n      return this.loginForm.get('username');\n    }\n    get password() {\n      return this.loginForm.get('password');\n    }\n    static {\n      this.ɵfac = function LoginComponent_Factory(t) {\n        return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginComponent,\n        selectors: [[\"app-login\"]],\n        decls: 21,\n        vars: 7,\n        consts: [[3, \"ngSubmit\", \"formGroup\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"], [\"class\", \"error\", 4, \"ngIf\"], [\"mat-button\", \"\", 3, \"click\"], [1, \"error\"]],\n        template: function LoginComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"mat-dialog-content\")(1, \"h2\");\n            i0.ɵɵtext(2, \"Login\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"form\", 0);\n            i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(4, \"mat-form-field\", 1)(5, \"mat-label\");\n            i0.ɵɵtext(6, \"Username\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(7, \"input\", 2);\n            i0.ɵɵtemplate(8, LoginComponent_mat_error_8_Template, 4, 3, \"mat-error\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"mat-form-field\", 1)(10, \"mat-label\");\n            i0.ɵɵtext(11, \"Password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(12, \"input\", 4);\n            i0.ɵɵtemplate(13, LoginComponent_mat_error_13_Template, 4, 3, \"mat-error\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(14, \"button\", 5);\n            i0.ɵɵtemplate(15, LoginComponent_span_15_Template, 2, 0, \"span\", 3)(16, LoginComponent_span_16_Template, 2, 0, \"span\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(17, LoginComponent_div_17_Template, 2, 1, \"div\", 6);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(18, \"mat-dialog-actions\")(19, \"button\", 7);\n            i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_19_listener() {\n              return ctx.dialogRef.close();\n            });\n            i0.ɵɵtext(20, \"Cancel\");\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (ctx.username == null ? null : ctx.username.touched) && (ctx.username == null ? null : ctx.username.invalid));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", (ctx.password == null ? null : ctx.password.touched) && (ctx.password == null ? null : ctx.password.invalid));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid || ctx.loading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.loading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.error);\n          }\n        },\n        dependencies: [i5.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i1.MatDialogActions, i1.MatDialogContent, i6.MatButton, i7.MatInput, i8.MatFormField, i8.MatLabel, i8.MatError],\n        styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:15px}.login-dialog[_ngcontent-%COMP%]{padding:20px;max-width:300px}form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:15px}label[_ngcontent-%COMP%]{font-weight:700}input[_ngcontent-%COMP%]{padding:8px;width:100%;border:1px solid #ccc;border-radius:4px}.error[_ngcontent-%COMP%]{color:red;font-size:.9em;margin-top:5px}button[_ngcontent-%COMP%]{padding:10px;border:none;border-radius:4px;cursor:pointer}button[type=submit][_ngcontent-%COMP%]{background-color:#007bff;color:#fff}button[type=submit][_ngcontent-%COMP%]:disabled{background-color:#ccc;cursor:not-allowed}button[type=button][_ngcontent-%COMP%]{background-color:#6c757d;color:#fff}.error[_ngcontent-%COMP%]{color:red;margin-top:10px}.loading[_ngcontent-%COMP%]{margin-left:10px;font-style:italic}\"]\n      });\n    }\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}