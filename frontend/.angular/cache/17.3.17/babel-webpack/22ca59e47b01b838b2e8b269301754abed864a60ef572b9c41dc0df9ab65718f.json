{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../services/auth.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nconst _c0 = (a0, a1) => ({\n  color1: a0,\n  color2: a1\n});\nfunction RegisterComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function RegisterComponent_div_4_Template_div_click_0_listener() {\n      const topic_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.navigateToTopic(topic_r2.name));\n    });\n    i0.ɵɵelement(1, \"img\", 5);\n    i0.ɵɵelementStart(2, \"span\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const topic_r2 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c0, i_r4 % 2 === 0, i_r4 % 2 !== 0));\n    i0.ɵɵadvance();\n    i0.ɵɵpropertyInterpolate1(\"alt\", \"\", topic_r2.name, \" icon\");\n    i0.ɵɵproperty(\"src\", \"assets/images/\" + topic_r2.image, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(topic_r2.name);\n  }\n}\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(dialogRef, fb, authService, router) {\n      this.dialogRef = dialogRef;\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.error = '';\n      this.registerForm = this.fb.group({\n        username: ['', [Validators.required, Validators.minLength(6), Validators.pattern('^[a-zA-Z0-9]+$')]],\n        password: ['', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*$')]],\n        confirmPassword: ['', [Validators.required, Validators.minLength(8)]]\n      }, {\n        validators: this.passwordMatchValidator.bind(this)\n      });\n    }\n    passwordMatchValidator(group) {\n      const password = group.get('password')?.value;\n      const confirmPassword = group.get('confirmPassword')?.value;\n      console.log('Validation:', {\n        password,\n        confirmPassword,\n        mismatch: password !== confirmPassword\n      });\n      return password === confirmPassword ? null : {\n        mismatch: true\n      };\n    }\n    onSubmit() {\n      console.log('Form valid:', this.registerForm.valid, this.registerForm.value);\n      if (this.registerForm.valid) {\n        const {\n          username,\n          password\n        } = this.registerForm.value;\n        this.authService.register(username, password).subscribe({\n          next: response => {\n            console.log('Register success:', response);\n            this.router.navigate(['/login']).then(success => {\n              console.log('Navigation to login success:', success);\n              this.dialogRef.close();\n            }).catch(err => console.error('Navigation to login error:', err));\n          },\n          error: err => {\n            console.error('Register error:', err);\n            this.error = err.error?.message || 'Registration failed. Please try again.';\n            // Optionally reset form or focus on username if duplicate\n            this.registerForm.get('username')?.setValue('');\n          },\n          complete: () => console.log('Register subscription complete')\n        });\n      } else {\n        this.error = 'Please fix the form errors before submitting.';\n        this.registerForm.markAllAsTouched();\n      }\n    }\n    get username() {\n      return this.registerForm.get('username');\n    }\n    get password() {\n      return this.registerForm.get('password');\n    }\n    get confirmPassword() {\n      return this.registerForm.get('confirmPassword');\n    }\n    static {\n      this.ɵfac = function RegisterComponent_Factory(t) {\n        return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: RegisterComponent,\n        selectors: [[\"app-register\"]],\n        decls: 5,\n        vars: 1,\n        consts: [[1, \"tabs-container\"], [1, \"center-text\"], [1, \"topic-grid\"], [\"class\", \"topic-box\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"topic-box\", 3, \"click\", \"ngClass\"], [1, \"topic-image\", 3, \"src\", \"alt\"], [1, \"topic-name\"]],\n        template: function RegisterComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n            i0.ɵɵtext(2, \"Lets Begin Our Journey\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 2);\n            i0.ɵɵtemplate(4, RegisterComponent_div_4_Template, 4, 8, \"div\", 3);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngForOf\", ctx.topics);\n          }\n        },\n        dependencies: [i5.NgClass, i5.NgForOf],\n        styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:15px}.error[_ngcontent-%COMP%]{color:red;margin-bottom:15px}mat-error[_ngcontent-%COMP%]{font-size:.85em;margin-top:5px}button[_ngcontent-%COMP%]{margin-top:10px}\"]\n      });\n    }\n  }\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}