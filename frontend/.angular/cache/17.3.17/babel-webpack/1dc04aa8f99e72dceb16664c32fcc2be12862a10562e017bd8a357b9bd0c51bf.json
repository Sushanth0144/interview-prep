{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../services/auth.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/form-field\";\nfunction RegisterComponent_form_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 3);\n    i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_form_3_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"mat-form-field\")(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Username\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 4);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function RegisterComponent_form_3_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r2.username, $event) || (ctx_r2.username = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"mat-form-field\")(6, \"mat-label\");\n    i0.ɵɵtext(7, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"input\", 5);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function RegisterComponent_form_3_Template_input_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r2.password, $event) || (ctx_r2.password = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"button\", 6);\n    i0.ɵɵtext(10, \"Register\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r2.username);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r2.password);\n  }\n}\nfunction RegisterComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r2.error);\n  }\n}\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(dialogRef, fb, authService) {\n      this.dialogRef = dialogRef;\n      this.fb = fb;\n      this.authService = authService;\n      this.error = '';\n      this.registerForm = this.fb.group({\n        username: ['', [Validators.required, Validators.minLength(6), Validators.pattern('^[a-zA-Z0-9]+$')]],\n        password: ['', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).*$')]],\n        confirmPassword: ['', [Validators.required, Validators.minLength(8)]]\n      }, {\n        validators: this.passwordMatchValidator\n      });\n    }\n    // Custom validator to check if password and confirmPassword match\n    passwordMatchValidator(group) {\n      const password = group.get('password')?.value;\n      const confirmPassword = group.get('confirmPassword')?.value;\n      return password === confirmPassword ? null : {\n        mismatch: true\n      };\n    }\n    onSubmit() {\n      if (this.registerForm.valid) {\n        const {\n          username,\n          password\n        } = this.registerForm.value;\n        this.authService.register(username, password).subscribe({\n          next: () => this.dialogRef.close(),\n          error: err => this.error = err.error.message || 'Registration failed.'\n        });\n      } else {\n        this.error = 'Please fix the form errors before submitting.';\n      }\n    }\n    get username() {\n      return this.registerForm.get('username');\n    }\n    get password() {\n      return this.registerForm.get('password');\n    }\n    get confirmPassword() {\n      return this.registerForm.get('confirmPassword');\n    }\n    static {\n      this.ɵfac = function RegisterComponent_Factory(t) {\n        return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.AuthService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: RegisterComponent,\n        selectors: [[\"app-register\"]],\n        decls: 9,\n        vars: 2,\n        consts: [[\"errorTemplate\", \"\"], [3, \"ngSubmit\", 4, \"ngIf\", \"ngIfElse\"], [\"mat-button\", \"\", 3, \"click\"], [3, \"ngSubmit\"], [\"matInput\", \"\", \"name\", \"username\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"matInput\", \"\", \"type\", \"password\", \"name\", \"password\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [2, \"color\", \"red\"]],\n        template: function RegisterComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"mat-dialog-content\")(1, \"h2\");\n            i0.ɵɵtext(2, \"Register\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(3, RegisterComponent_form_3_Template, 11, 2, \"form\", 1)(4, RegisterComponent_ng_template_4_Template, 2, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"mat-dialog-actions\")(7, \"button\", 2);\n            i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_7_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.dialogRef.close());\n            });\n            i0.ɵɵtext(8, \"Cancel\");\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            const errorTemplate_r4 = i0.ɵɵreference(5);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", !ctx.error)(\"ngIfElse\", errorTemplate_r4);\n          }\n        },\n        dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm, i1.MatDialogActions, i1.MatDialogContent, i5.MatButton, i6.MatInput, i7.MatFormField, i7.MatLabel],\n        styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:15px}.error[_ngcontent-%COMP%]{color:red;margin-bottom:15px}\"]\n      });\n    }\n  }\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}