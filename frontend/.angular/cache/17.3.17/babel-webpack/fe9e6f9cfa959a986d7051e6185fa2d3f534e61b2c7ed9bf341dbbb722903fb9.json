{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:5000/api'; // Base URL for API endpoints\n      this.tokenKey = 'authToken'; // Key for storing token in localStorage\n    }\n    // Register a new user\n    register(username, password) {\n      return this.http.post(`${this.apiUrl}/register`, {\n        username,\n        password\n      }).pipe(tap(response => console.log('Register response:', response)), catchError(this.handleError));\n    }\n    // Login user and store token\n    login(username, password) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        username,\n        password\n      }).pipe(tap(response => {\n        console.log('Login response:', response);\n        if (response.token) {\n          localStorage.setItem(this.tokenKey, response.token); // Store the token\n        } else {\n          throw new Error('No token received from server');\n        }\n      }), catchError(this.handleError));\n    }\n    // Get questions (authenticated request)\n    getQuestions() {\n      const token = this.getToken();\n      if (!token) {\n        throw new Error('No authentication token available');\n      }\n      const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n      return this.http.get(`${this.apiUrl}/questions`, {\n        headers\n      }).pipe(tap(response => console.log('Questions response:', response)), catchError(this.handleError));\n    }\n    // Get the stored token\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    // Clear token on logout (optional method for future use)\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n    }\n    // Handle HTTP errors\n    handleError(error) {\n      let errorMessage = 'An unknown error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else if (error.status === 401) {\n        // Unauthorized\n        errorMessage = error.error?.message || 'Invalid credentials or session expired';\n      } else if (error.status === 400) {\n        // Bad request (e.g., username exists)\n        errorMessage = error.error?.message || 'Bad request';\n      } else {\n        // Server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      console.error('HTTP Error:', errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root' // Makes the service available application-wide\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}