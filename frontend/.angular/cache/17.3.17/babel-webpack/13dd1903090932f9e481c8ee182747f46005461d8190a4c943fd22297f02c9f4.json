{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:5000/api';\n      this.tokenKey = 'token';\n      this.roleKey = 'role';\n      this.refreshTokenKey = 'refresh_token';\n      this.isLoggedInSubject = new BehaviorSubject(false);\n      this.currentRole = null;\n      this.checkLoginStatus();\n    }\n    /* =======================\n          AUTH ACTIONS\n    ======================= */\n    register(username, password, role = 'user') {\n      return this.http.post(`${this.apiUrl}/register`, {\n        username,\n        password,\n        role\n      }).pipe(tap(() => this.checkLoginStatus()), catchError(error => {\n        console.error('Registration error:', error);\n        throw error;\n      }));\n    }\n    login(username, password) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        username,\n        password\n      }).pipe(tap(response => {\n        if (!response.access_token) throw new Error(\"No token received from server\");\n        // ✅ Save tokens and role\n        localStorage.setItem(this.tokenKey, response.access_token);\n        localStorage.setItem(this.refreshTokenKey, response.refresh_token);\n        localStorage.setItem(this.roleKey, response.role);\n        this.currentRole = response.role;\n        this.checkLoginStatus();\n      }), catchError(error => {\n        console.error('Login error:', error);\n        throw error;\n      }));\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n      localStorage.removeItem(this.refreshTokenKey);\n      localStorage.removeItem(this.roleKey);\n      this.isLoggedInSubject.next(false);\n      this.currentRole = null;\n    }\n    /* =======================\n         LOGIN STATE / ROLE\n    ======================= */\n    isLoggedIn() {\n      return this.isLoggedInSubject.asObservable();\n    }\n    isAdmin() {\n      return this.getRole() === 'admin';\n    }\n    getRole() {\n      return this.currentRole || localStorage.getItem(this.roleKey);\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    checkLoginStatus() {\n      const token = localStorage.getItem(this.tokenKey);\n      this.currentRole = localStorage.getItem(this.roleKey);\n      this.isLoggedInSubject.next(!!token);\n    }\n    /* =======================\n         HELPER FUNCTIONS\n    ======================= */\n    handleLoginRedirect(router) {\n      const role = this.getRole();\n      if (role === 'admin') {\n        router.navigate(['/admin']);\n      } else {\n        router.navigate(['/topics']);\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}